============================
Test cases for matrix_divided
============================

Returns new matrix or exception under some conditions

        >>> matrix_divided = __import__('2-matrix_divided').matrix_divided

CASE 1: div is an integer
	>>> matrix = [[1, 2, 3], [4, 5, 6]]
        >>> print(matrix_divided(matrix, 1))
        [[1, 2, 3], [4, 5, 6]]

CASE 2: divide by zero
	>>> matrix = [[1, 2, 3], [4, 5, 6]]
        >>> print(matrix_divided(matrix, 0))
        Traceback (most recent call last):
	ZeroDivisionError: division by zero


CASE 3: divide by a float
	>>> matrix = [[1, 2, 3], [4, 5, 6]]
        >>> print(matrix_divided(matrix, 1.5))
        [[0.67, 1.33, 2], [2.67, 3.33, 4]]


CASE 4: dividing by non int/float
	>>> matrix = [[1, 2, 3], [4, 5, 6]]
        >>> print(matrix_divided(matrix, '#'))
        Traceback (most recent call last):
	TypeError: div must be a number


CASE 5: if matrix is not integer/float
	>>> matrix = [[1, 2, 'c'], [4, 'e', 6]]
        >>> print(matrix_divided(matrix, 5))
        Traceback: (most recent call last):
	TypeError: matrix must be a matrix (list of lists) of integers/floats


CASE 6: rows that do have same size
	>>> matrix = [[1, 2, 3], [4, 5, 6' 7]]
        >>> print(matrix_divided(matrix, 8))
        Traceback: (most recent call last):
	TypeError: Each row of the matrix must have the same size
